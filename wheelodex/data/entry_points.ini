[console_scripts]
summary = Command-line programs
description =
    `console_scripts` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) and
    [pip](https://pip.pypa.io) to create & install a project's command-line
    programs.  If a project defines a `console_scripts` entry point named `foo`
    that points to `modulename:funcname`, then when the project is installed,
    the installer will also create & install an executable named `foo` that
    invokes `funcname` in `modulename` when run.  [See the setuptools
    documentation for more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation)

[distutils.commands]
summary = `setup.py` commands
description =
    `distutils.commands` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) to add new commands to
    `setup.py` scripts made with `setuptools.setup()`.  If a project defines a
    `distutils.commands` entry point named `foo` that points to a subclass of
    `setuptools.Command`, then once the project is installed, users will be
    able to run `python setup.py foo` to run the custom command.  [See the
    setuptools documentation for more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#adding-commands)

[distutils.setup_keywords]
summary = `setup()` arguments
description =
    `distutils.setup_keywords` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) to add new keyword
    arguments to the `setuptools.setup()` function.  If a project defines a
    `distutils.setup_keywords` entry point named `foo` that points to a
    function, then once the project is installed, `setuptools.setup()` will
    accept a keyword argument named `foo` and will use the given function to
    validate the argument before setting `foo` on the `Distribution` object.
    [See the setuptools documentation for more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#adding-setup-arguments)

[egg_info.writers]
summary = `EGG-INFO` files
description =
    `egg_info.writers` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) to create files in
    `<project>.egg-info/` subdirectories in projects & sdists and `EGG-INFO/`
    directories in eggs.  If a project defines an `egg_info.writers` entry
    point named `foo` that points to a function, then once the project is
    installed, running `python setup.py egg_info` will create a file named
    `foo` in `<project>.egg-info/` whose contents are created by the given
    function.  [See the setuptools documentation for more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#adding-new-egg-info-files)

[flask.commands]
summary = Flask commands
description =
    `flask.commands` entry points are used by
    [Flask](https://www.palletsprojects.com/p/flask/) to register subcommands
    of the `flask` command.  If a project defines a `flask.commands` entry
    point named `foo` that points to a Click command object, then once the
    project is installed, running `flask foo` will invoke the given command.
    [See the Flask documentation for more
    information.](http://flask.pocoo.org/docs/latest/cli/#plugins)

[gui_scripts]
summary = GUI programs
description =
    `gui_scripts` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) and
    [pip](https://pip.pypa.io) to create & install a project's GUI programs.
    If a project defines a `gui_scripts` entry point named `foo` that points to
    `modulename:funcname`, then when the project is installed, the installer
    will also create & install an executable named `foo` that invokes
    `funcname` in `modulename` when run.  [See the setuptools documentation for
    more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation)

[setuptools.file_finders]
summary = Including files in sdists
description =
    `setuptools.file_finders` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) to include files from a
    project directory (usually one stored in a revision control system) in a
    source distribution.  If a project defines a `setuptools.file_finders`
    entry point pointing to a function, then once the project is installed, the
    given function will be called when building sdists in order to determine
    which files to include.  [See the setuptools documentation for more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#adding-support-for-revision-control-systems)

[setuptools.installation]
summary = Making eggs executable
description =
    `setuptools.installation` entry points are used by
    [setuptools](https://github.com/pypa/setuptools) to make egg files
    executable.  If a project defines a `setuptools.installation` entry point
    pointing to a function, then eggs built from that project can be executed
    to invoke the given function.  [See the setuptools documentation for more
    information.](https://setuptools.readthedocs.io/en/latest/setuptools.html#eggsecutable-scripts)

[sphinx.html_themes]
summary = Sphinx documentation themes
description =
    `sphinx.html_themes` entry points are used by
    [Sphinx](http://sphinx-doc.org) to register Sphinx HTML themes.  If a
    project defines a `sphinx.html_themes` entry point named `foo` that points
    to `modulename`, then once the project is installed, Sphinx will call
    `modulename.setup(app)` in order to register the theme `foo`.  [See the
    Sphinx documentation for more
    information.](http://www.sphinx-doc.org/en/stable/theming.html#distribute-your-theme-as-a-python-package)

[sphinx_themes]
summary = Sphinx documentation themes (deprecated)
description =
    `sphinx_themes` entry points are used by [Sphinx](http://sphinx-doc.org) to
    register Sphinx HTML themes.  If a project defines a `sphinx_themes` entry
    point that points to a function, then once the project is installed, Sphinx
    will call the given function in order to obtain a directory path containing
    one or more themes.  This entry point group is deprecated as of Sphinx 1.6
    in favor of `sphinx.html_themes`.  [See the Sphinx documentation for more
    information.](http://www.sphinx-doc.org/en/stable/theming.html#distribute-your-theme-as-a-python-package)

[tox]
summary = tox plugins
description =
    `tox` entry points are used by [tox](https://tox.readthedocs.org) to
    register tox plugins.  A project that defines a tox plugin must declare a
    `tox` entry point pointing to the plugin object in order for tox to be able
    to find the plugin once it's installed.  [See the tox documentation for
    more information.](https://tox.readthedocs.io/en/latest/plugins.html)
